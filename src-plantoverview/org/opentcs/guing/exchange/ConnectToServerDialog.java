/**
 * (c): IML.
 *
 */
package org.opentcs.guing.exchange;

import java.rmi.registry.Registry;
import java.util.LinkedList;
import java.util.Objects;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.opentcs.guing.components.dialogs.CancelButton;
import org.opentcs.guing.util.ResourceBundleUtil;
import org.opentcs.util.configuration.ConfigurationStore;
import org.opentcs.util.gui.Icons;

/**
 * A dialog that lets the user enter parameters for a connection to the kernel.
 *
 * @author Heinz Huber (Fraunhofer IML)
 * @author Stefan Walter (Fraunhofer IML)
 */
public class ConnectToServerDialog
    extends JDialog {

  /**
   * A return status code - returned if Cancel button has been pressed.
   */
  public static final int RET_CANCEL = 0;
  /**
   * A return status code - returned if OK button has been pressed.
   */
  public static final int RET_OK = 1;
  /**
   * Max amount of bookmarks to keep.
   */
  private static final int connectionBookmarksMaxAmount = 5;
  /**
   * Name of a connection bookmark.
   */
  private static final String connectionBookmarkName = "CONNECTION_BOOKMARK_";
  /**
   * This class's ConfigurationStore.
   */
  private static final ConfigurationStore configStore
      = ConfigurationStore.getStore(ConnectToServerDialog.class.getName());
  /**
   * The host to connect to.
   */
  private String host;
  /**
   * The port to connect to.
   */
  private int port;
  /**
   * List of the ConnectionsBookmarks.
   */
  private final LinkedList<ConnectionParamSet> bookmarks = new LinkedList<>();
  /**
   * This kernel proxy/connection manager to be used.
   */
  private final KernelProxyManager kernelProxyManager;
  /**
   * This dialog's return status code.
   */
  private int returnStatus = RET_CANCEL;

  /**
   * Creates a new instance.
   *
   * @param kernelProxyManager The kernel proxy manager to be used.
   */
  public ConnectToServerDialog(KernelProxyManager kernelProxyManager) {
    super((JFrame) null, true);
    this.kernelProxyManager = Objects.requireNonNull(kernelProxyManager);

    initComponents();
    initConnectionBookmarks();

    if (bookmarks.isEmpty()) {
      host = "localhost";
      port = Registry.REGISTRY_PORT;
    }
    else {
      host = bookmarks.getFirst().getHost();
      port = bookmarks.getFirst().getPort();
    }

    textFieldServer.setText(host);
    textFieldPort.setText("" + port);
    getRootPane().setDefaultButton(okButton);

    setIconImages(Icons.getOpenTCSIcons());
    setLocationRelativeTo(null);
    pack();
  }

  public int getPort() {
    return port;
  }

  public String getServer() {
    return host;
  }

  /**
   * @return the return status of this dialog - one of RET_OK or RET_CANCEL
   */
  public int getReturnStatus() {
    return returnStatus;
  }

  /**
   *
   * @param retStatus
   */
  private void doClose(int retStatus) {
    returnStatus = retStatus;
    setVisible(false);
    dispose();
  }

  /**
   * Zeigt eine Fehlermeldung an, wenn das Verbinden mit der Leitsteuerung nicht
   * erfolgreich war.
   */
  private void handleError() {
    String message = "Keine Verbindung zum Kernel";
    String title = "Mit Kernel verbinden";
    JOptionPane.showMessageDialog(this, message, title, JOptionPane.ERROR_MESSAGE);
  }

  /**
   * Initializes connection bookmarks from the config file.
   */
  private void initConnectionBookmarks() {
    String curConnectionBookmark;
    ConnectionParamSet cb;
    DefaultComboBoxModel<ConnectionParamSet> model
        = (DefaultComboBoxModel<ConnectionParamSet>) cbComboBox.getModel();

    for (int i = 0; i < connectionBookmarksMaxAmount; i++) {
      curConnectionBookmark = configStore.getString(connectionBookmarkName + i, "");

      if (!curConnectionBookmark.isEmpty()) {
        String[] parts = curConnectionBookmark.split(":");
        cb = new ConnectionParamSet(parts[0], parts[1]);
        model.addElement(cb);
        bookmarks.add(cb);
      }
    }
  }

  /**
   * Writes the connection bookmarks to the config.
   */
  private void writeBookmarks() {
    int i = 0;

    for (ConnectionParamSet cb : bookmarks) {
      configStore.setString(connectionBookmarkName + i, cb.getHost() + ":" + cb.getPort());
      i++;
    }
  }

  // CHECKSTYLE:OFF
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {
    java.awt.GridBagConstraints gridBagConstraints;

    labelServer = new javax.swing.JLabel();
    textFieldServer = new javax.swing.JTextField();
    labelPort = new javax.swing.JLabel();
    textFieldPort = new javax.swing.JTextField();
    panelButtons = new javax.swing.JPanel();
    okButton = new javax.swing.JButton();
    cancelButton = new CancelButton();
    cbComboBox = new javax.swing.JComboBox<ConnectionParamSet>();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/opentcs/guing/res/labels"); // NOI18N
    setTitle(bundle.getString("ConnectToServerDialog.title")); // NOI18N
    getContentPane().setLayout(new java.awt.GridBagLayout());

    labelServer.setFont(labelServer.getFont());
    labelServer.setText(bundle.getString("ConnectToServerDialog.host.text")); // NOI18N
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 4);
    getContentPane().add(labelServer, gridBagConstraints);

    textFieldServer.setColumns(15);
    textFieldServer.setFont(textFieldServer.getFont());
    textFieldServer.setText("localhost");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weightx = 0.5;
    gridBagConstraints.weighty = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 8);
    getContentPane().add(textFieldServer, gridBagConstraints);

    labelPort.setFont(labelPort.getFont());
    labelPort.setText("RMI Port:");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridy = 1;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 8, 0, 4);
    getContentPane().add(labelPort, gridBagConstraints);

    textFieldPort.setColumns(15);
    textFieldPort.setFont(textFieldPort.getFont());
    textFieldPort.setText("1099");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
    gridBagConstraints.weighty = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 8);
    getContentPane().add(textFieldPort, gridBagConstraints);

    panelButtons.setLayout(new java.awt.GridBagLayout());

    okButton.setFont(okButton.getFont().deriveFont(okButton.getFont().getStyle() | java.awt.Font.BOLD));
    okButton.setText("OK");
    okButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        okButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    panelButtons.add(okButton, gridBagConstraints);

    cancelButton.setFont(cancelButton.getFont());
    cancelButton.setText("Cancel");
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancelButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    panelButtons.add(cancelButton, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.PAGE_END;
    gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
    getContentPane().add(panelButtons, gridBagConstraints);

    cbComboBox.setFont(new java.awt.Font("Arial", 0, 11)); // NOI18N
    cbComboBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cbComboBoxActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
    gridBagConstraints.weighty = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 8);
    getContentPane().add(cbComboBox, gridBagConstraints);

    pack();
  }// </editor-fold>//GEN-END:initComponents

	private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
    host = textFieldServer.getText();
    try {
      port = Integer.parseInt(textFieldPort.getText());
      if (port < 0 || port > 65535) {
        throw new NumberFormatException();
      }
    }
    catch (NumberFormatException e) {
      JOptionPane.showMessageDialog(this,
                                    ResourceBundleUtil.getBundle().getString("ConnectToServerDialog.invalidPort.message"),
                                    ResourceBundleUtil.getBundle().getString("ConnectToServerDialog.invalidPort"),
                                    JOptionPane.ERROR_MESSAGE);
      return;
    }

    if (kernelProxyManager.connect(host, port)) {
      ConnectionParamSet connParamSet = new ConnectionParamSet(host, port);
      if (bookmarks.isEmpty() || !connParamSet.equals(bookmarks.getFirst())) {
        bookmarks.addFirst(connParamSet);
        if (bookmarks.size() > connectionBookmarksMaxAmount) {
          bookmarks.removeLast();
        }
        writeBookmarks();
      }

      doClose(RET_OK);
    }
    else {
      handleError();
      textFieldServer.setText(host);
    }
	}//GEN-LAST:event_okButtonActionPerformed

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    doClose(RET_CANCEL);
	}//GEN-LAST:event_cancelButtonActionPerformed

  private void cbComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbComboBoxActionPerformed
    DefaultComboBoxModel<ConnectionParamSet> model
        = (DefaultComboBoxModel<ConnectionParamSet>) cbComboBox.getModel();
    ConnectionParamSet cb = (ConnectionParamSet) model.getSelectedItem();

    if (cb != null) {
      textFieldServer.setText(cb.getHost());
      textFieldPort.setText("" + cb.getPort());
    }
  }//GEN-LAST:event_cbComboBoxActionPerformed
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton cancelButton;
  private javax.swing.JComboBox<ConnectionParamSet> cbComboBox;
  private javax.swing.JLabel labelPort;
  private javax.swing.JLabel labelServer;
  private javax.swing.JButton okButton;
  private javax.swing.JPanel panelButtons;
  private javax.swing.JTextField textFieldPort;
  private javax.swing.JTextField textFieldServer;
  // End of variables declaration//GEN-END:variables
  // CHECKSTYLE:ON
}
