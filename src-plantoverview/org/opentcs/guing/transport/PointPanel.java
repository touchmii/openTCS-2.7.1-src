/**
 * (c): IML, IFAK.
 *
 */
package org.opentcs.guing.transport;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import org.opentcs.guing.components.dialogs.DialogContent;
import org.opentcs.guing.model.ModelComponent;
import org.opentcs.guing.model.elements.PointModel;

/**
 * Eine Benutzerschnittstelle zum Auswählen einer Station oder eines
 * Meldepunktes als direktes Fahrtziel für ein Fahrzeug.
 *
 * @author Sebastian Naumann (ifak e.V. Magdeburg)
 */
public class PointPanel
		extends DialogContent {

	/**
	 * Die zur Auswahl stehenden Stationen.
	 */
	protected List<PointModel> fItems;

	/**
	 * Creates new form PointPanel
	 */
	public PointPanel(List<PointModel> items) {
		initComponents();
		fItems = items;
		setDialogTitle("Meldepunkt auswählen");
	
		Collections.sort(fItems, getComparator());
		List<String> names = new ArrayList<>();
		Iterator<? extends ModelComponent> e = fItems.iterator();
	
		while (e.hasNext()) {
			names.add(e.next().getName());
		}

		itemsComboBox.setModel(new DefaultComboBoxModel(new Vector(names)));
	}

	/**
	 * Liefert einen Comparator zum Sortieren der Elemente.
	 *
	 * @return den Comparator
	 */
	protected final Comparator<ModelComponent> getComparator() {
		return new Comparator<ModelComponent>() {

      @Override
			public int compare(ModelComponent item1, ModelComponent item2) {
				String s1 = item1.getName();
				String s2 = item2.getName();
				s1 = s1.toLowerCase();
				s2 = s2.toLowerCase();
	
				return s1.compareTo(s2);
			}
		};
	}

	/**
	 * Liefert das ausgewählte Ziel, zu dem das Fahrzeug hinbeordert werden soll.
	 *
	 * @return das Ziel oder
	 * <code>null</code>, falls kein Ziel ausgewählt wurde
	 */
	public ModelComponent getSelectedItem() {
		int index = itemsComboBox.getSelectedIndex();
	
		if (index == -1) {
			return null;
		}

		return fItems.get(index);
	}

  @Override
	public void update() {
		// wird nicht benötigt
	}

  @Override
	public void initFields() {
		// wird nicht benötigt
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        itemsLabel = new javax.swing.JLabel();
        itemsComboBox = new javax.swing.JComboBox();

        setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT, 10, 5));

        itemsLabel.setFont(itemsLabel.getFont());
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/opentcs/guing/res/labels"); // NOI18N
        itemsLabel.setText(bundle.getString("VehicleAction.points")); // NOI18N
        add(itemsLabel);

        itemsComboBox.setFont(itemsComboBox.getFont());
        add(itemsComboBox);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox itemsComboBox;
    private javax.swing.JLabel itemsLabel;
    // End of variables declaration//GEN-END:variables
}
